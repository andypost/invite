<?php

function invite_by_email_menu() {
  $items['admin/config/people/invite/by_mail'] = array(
    'title' => 'Invite by mail',
    'description' => 'Modify invitation by mail settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('invite_by_email_settings_form'),
    'access arguments' => array('administer invitations'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'invite_by_email.admin.inc',
  );

  return $items;
}

function invite_by_email_invite_processor() {
  return array(
    'label' => t('Invite By Mail'),
  );
}

function invite_by_email_invite_type_create($invite_type) {
  $fields = array(
    'field_invitation_email_address' => array(
      'definition' => array(
        'field_name' => 'field_invitation_email_address',
        'type' => 'text',
        'cardinality' => 1,
      ),
      'instance' => array(
        'field_name' => 'field_invitation_email_address',
        'entity_type' => 'invite',
        'label' => 'E-mail',
        'bundle' => 'invite_by_email',
        'description' => 'Type e-mail address of person you wish invite.',
        'widget' => array(
          'type' => 'text_textfield',
          'weight' => 10,
        ),
        'display' => array(
          'default' => array(
            'type' => 'text_textfield',
            'weight' => 10,
          ),
        ),
      ),
    ),
    'field_invitation_email_subject' => array(
      'definition' => array(
        'field_name' => 'field_invitation_email_subject',
        'type' => 'text',
        'cardinality' => 1,
      ),
      'instance' => array(
        'field_name' => 'field_invitation_email_subject',
        'entity_type' => 'invite',
        'label' => 'Subject',
        'bundle' => 'invite_by_email',
        'description' => 'Enter e-mail subject.',
        'widget' => array(
          'type' => 'text_textfield',
          'weight' => 20,
        ),
        'display' => array(
          'default' => array(
            'type' => 'text_textfield',
            'weight' => 20,
          ),
        ),
      ),
    ),
    'field_invitation_email_body' => array(
      'definition' => array(
        'field_name' => 'field_invitation_email_body',
        'type' => 'text_long',
        'cardinality' => 1,
      ),
      'instance' => array(
        'field_name' => 'field_invitation_email_body',
        'entity_type' => 'invite',
        'label' => 'Body',
        'bundle' => 'invite_by_email',
        'description' => 'Enter e-mail body.',
        'widget' => array(
          'type' => 'text_textarea',
          'weight' => 30,
        ),
        'display' => array(
          'default' => array(
            'type' => 'text_textarea',
            'weight' => 30,
          ),
        ),
      ),
    ),
  );

  foreach ($fields as $field) {
    $info = field_info_field($field['definition']['field_name']);
    if (empty($info)) {
      field_create_field($field['definition']);
    }
    $field['instance']['bundle'] = $invite_type->type;
    field_create_instance($field['instance']);
  }
}

function invite_by_email_invite_validate($invite) {
  $validated = TRUE;
  if (method_exists($invite, 'type_details') && $invite->type_details()->invite_processor == 'invite_by_email') {
    $entity = entity_metadata_wrapper('invite', $invite);
    $mail_address = $entity->field_invitation_email_address->value();
    // Validate is email address valid.
    if (!valid_email_address($mail_address)) {
      $validated = FALSE;
      drupal_set_message(t('Email address %email is invalid.', array('%email' => $mail_address)), 'error');
    }

    // Check that we are not inviting invite's author.
    if ($entity->inviter->mail->value() == $mail_address) {
      $validated = FALSE;
      drupal_set_message(t('You couldn\'t invite yourself.'), 'error');
    }

    // Check that this email address wasn't used by user before.
    $query = db_select('field_data_field_invitation_email_address', 'address');
    $query->join('invite', 'i', 'i.iid=address.entity_id');
    $duplicate = $query->condition('i.uid', $entity->inviter->uid->value(), '=')
      ->fields('address', array('field_invitation_email_address_value'))
      ->condition('address.field_invitation_email_address_value', $mail_address, '=')
      ->condition('address.deleted', 0, '=')
      ->range(0, 1)
      ->execute()
      ->fetchField();
    if ($duplicate) {
      $validated = FALSE;
      drupal_set_message(t('You have invited this user already.'), 'error');
    }
  }

  return $validated;
}

function invite_by_email_entity_presave($invite, $type) {
  global $user;
  if (method_exists($invite, 'type_details') && $invite->type_details()->invite_processor == 'invite_by_email') {
    $entity = entity_metadata_wrapper('invite', $invite);
    $mail_address = $entity->field_invitation_email_address->value();
    if ($account = user_load_by_mail($mail_address)) {
      $invite->invitee = $account->uid;
    }
    $token_data = array(
      'invite' => $invite,
      'user' => $user,
      'profile' => user_load($user->uid),
    );
    $invite->data = array(
      'subject' => token_replace(trim($entity->field_invitation_email_subject->value()), $token_data),
      'message' => token_replace($entity->field_invitation_email_body->value(), $token_data),
    );

    $invite->data = serialize($invite->data);
  }
}

function invite_by_email_entity_insert($invite, $type) {
  if (method_exists($invite, 'type_details') && $invite->type_details()->invite_processor == 'invite_by_email') {
    $entity = entity_metadata_wrapper('invite', $invite);
    $mail = $entity->field_invitation_email_address->value();
    if ($account = user_load_by_mail($mail)) {
      // User already exists in system.

    }

    // TODO: move to Invite module.
    if ($invite->sendInvite()) {
      drupal_set_message(t('Message was sent'));
    }
    else {
      drupal_set_message(t('Failed to send a message.'), 'error');
    }
  }
}

/**
 * Implements processor_send_invitation function.
 *
 * The invitation email is sent to the invitee
 *
 * @param $invite
 *   Invite object.
 * @return
 *   TRUE, if sending was successful; FALSE otherwise..
 */
function invite_by_email_send_invitation($invite) {
  global $language;

  // Check if this is an existing invite.
  $existing_invite = invite_load($invite->reg_code);
  if ($existing_invite) {
    $invite->expiry = REQUEST_TIME + (variable_get('invite_default_expiry_time', 30) * 60 * 60 * 24);
    $invite->resent++;
  }

  $entity = entity_metadata_wrapper('invite', $invite);
  if (!variable_get('invite_use_users_email', 0)) {
    $from = variable_get('invite_manual_from', '');
  }
  else {
    $from = $entity->inviter->mail->value();
  }
  if (empty($from)) {
    // Never pass an empty string to drupal_mail()
    $from = NULL;
  }

  $params = array('invite' => $invite);

  // Override Reply-To address.
  if (!variable_get('invite_use_users_email_replyto', 0)) {
    $reply_to = variable_get('invite_manual_reply_to', '');
  }
  else {
    $reply_to = $entity->inviter->mail->value();
  }
  if (!empty($reply_to)) {
    $params['reply-to'] = $reply_to;
  }

  // Send e-mail.
  $result = drupal_mail('invite_by_email', 'invite', $entity->field_invitation_email_address->value(), $language, $params, $from, TRUE);

  return $result['result'];
}

/**
 * Implements hook_mail().
 */
function invite_by_email_mail($key, &$message, $params) {
  global $user;

  $invite = $params['invite'];

  if (!empty($params['reply-to'])) {
    $message['headers']['Reply-To'] = $params['reply-to'];
  }

  $entity = entity_metadata_wrapper('invite', $invite);
  $token_data = array(
    'invite' => $invite,
    'user' => $user,
    'profile' => user_load($user->uid),
  );

  $message['subject'] = token_replace(trim($entity->field_invitation_email_subject->value()), $token_data);
  $message['body'][] = token_replace($entity->field_invitation_email_body->value(), $token_data);
}

function invite_by_email_form_invite_form_alter(&$form, &$form_state, $form_id) {
  $invite = $form['#entity'];
  if (method_exists($invite, 'type_details') && $invite->type_details()->invite_processor == 'invite_by_email') {
    $language_subject = $form['field_invitation_email_subject']['#language'];
    $form['field_invitation_email_subject'][$language_subject][0]['value']['#default_value'] = variable_get('invite_default_mail_subject', '');
    $form['field_invitation_email_body'][$language_subject][0]['value']['#default_value'] = variable_get('invite_default_mail_template', '');
    $form['actions']['submit']['#value'] = t('Send Invitation');
  }
}

<?php

/**
 * Implements hook_entity_info().
 */
function invite_entity_info() {
  $return = array(
    'invite' => array(
      'label' => t('Invite'),
      'entity class' => 'Invite',
      'controller class' => 'InviteController',
      'base table' => 'invite',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'iid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'invite_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'invite',
      'access callback' => 'invite_access',
      'metadata controller class' => 'InviteMetadataController',
    ),
  );

  $return['invite_type'] = array(
    'label' => t('Invite Type'),
    'entity class' => 'InviteType',
    'controller class' => 'InviteTypeController',
    'base table' => 'invite_type',
    'fieldable' => FALSE,
    'bundle of' => 'invite',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'invite',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/invite-types',
      'file' => 'includes/invite.admin.inc',
      'controller class' => 'InviteTypeUIController',
    ),
    'access callback' => 'invite_type_access',
  );
  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function invite_entity_info_alter(&$entity_info) {
  foreach (invite_get_types() as $type => $info) {
    $entity_info['invite']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/invite-types/manage/%invite_type',
        'real path' => 'admin/structure/invite-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function invite_menu() {
  $items = array();
  $items['invite/add'] = array(
    'title' => 'Add Invite',
    'page callback' => 'invite_admin_add_page',
    'access arguments' => array('administer invite entities'),
    'file' => 'includes/invite.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'invite',
    'tab_root' => 'invite',
  );

  $invite_uri = 'invite/%invite';
  $invite_uri_argument_position = 1;

  $items[$invite_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('invite', $invite_uri_argument_position),
    'page callback' => 'invite_view',
    'page arguments' => array($invite_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'invite', $invite_uri_argument_position),
    'file' => 'includes/invite.pages.inc',
  );

  $items[$invite_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$invite_uri . '/delete'] = array(
    'title' => 'Delete invite',
    'title callback' => 'invite_label',
    'title arguments' => array($invite_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('invite_delete_form', $invite_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'invite', $invite_uri_argument_position),
    'file' => 'includes/invite.admin.inc',
  );

  $items[$invite_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('invite_form', $invite_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'invite', $invite_uri_argument_position),
    'file' => 'includes/invite.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  foreach (invite_get_types() as $type => $info) {
    $items['invite/add/' . $type] = array(
      'title' => 'Add invite',
      'page callback' => 'invite_add',
      'page arguments' => array(2),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'invite', $type),
      'file' => 'includes/invite.admin.inc',
    );
  }

  $items['admin/structure/invite-types/%invite_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('invite_type_form_delete_confirm', 4),
    'access arguments' => array('administer invite types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/invite.admin.inc',
  );

  // Admin menu items
  $items['admin/config/people/invite'] = array(
    'title' => 'Invite',
    'description' => 'Modify invitation settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('invite_settings_form'),
    'access arguments' => array('administer invitations'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    'file' => 'includes/invite.admin.inc',
  );

  $items['admin/config/people/invite/common'] = array(
    'title' => 'Invite',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );

  // Frontend menu items
  $items['invite/accept/%invite_by_code'] = array(
    'page callback' => 'invite_accept',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'invite.pages.inc',
  );
  $items['invite/withdraw/%invite_by_code'] = array(
    'page callback' => 'drupal_get_form',
//    'page arguments' => array('invite_withdraw', 2),
//    'access callback' => 'invite_withdraw_access',
//    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['invite/resend/%invite_by_code'] = array(
    'title' => 'Resend invitation',
//    'page callback' => 'invite_resend',
//    'page arguments' => array(2),
//    'access arguments' => array('send invitations'),
    'type' => MENU_CALLBACK,
    'file' => 'invite.pages.inc',
  );

  return $items;
}

/**
 * Access callback for invite type.
 */
function invite_access($op, $invite, $account = NULL, $entity_type = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer invite entities', $account)
        || user_access('create invite entities', $account);
    case 'view':
      return user_access('administer invite entities', $account)
        || user_access('view invite entities', $account);
    case 'edit':
      return user_access('administer invite entities')
        || user_access('edit any invite entities')
        || (user_access('edit own invite entities') && ($invite->uid == $account->uid));
  }
}

/**
 * Access callback for task Type.
 */
function invite_type_access($op, $entity = NULL) {
  return user_access('administer invite types');
}


/**
 * Implements hook_permission().
 */
function invite_permission() {
  $permissions = array(
    'administer invitations' => array(
      'title' => t('Administer invitations'),
      'description' => t('Administer all invitations'),
      'restrict access' => TRUE,
    ),
    'administer invite types' => array(
      'title' => t('Administer invite types'),
      'description' => t('Allows users to configure invite types and their fields.'),
      'restrict access' => TRUE,
    ),
    'create invite entities' => array(
      'title' => t('Create invites'),
      'description' => t('Allows users to create invites.'),
      'restrict access' => TRUE,
    ),
    'view invite entities' => array(
      'title' => t('View invites'),
      'description' => t('Allows users to view invites.'),
      'restrict access' => TRUE,
    ),
    'edit any invite entities' => array(
      'title' => t('Edit any invites'),
      'description' => t('Allows users to edit any invites.'),
      'restrict access' => TRUE,
    ),
    'edit own invite entities' => array(
      'title' => t('Edit own invites'),
      'description' => t('Allows users to edit own invites.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function invite_entity_property_info_alter(&$info) {
  $properties = &$info['invite']['properties'];
  $properties['created'] = array(
    'label' => t('Date created'),
    'type' => 'date',
    'description' => t('The date the invite was created.'),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer invite entities',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t('Date changed'),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t('The date the node was most recently updated.'),
  );
  $properties['uid'] = array(
    'label' => t('Author'),
    'type' => 'user',
    'description' => t('The author of the invite.'),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer invite entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}

function invite_by_code_load($reg_code) {
  $invites = invite_load_multiple(array(), array('reg_code' => $reg_code));
  return reset($invites);
}

/**
 * Load a invite.
 */
function invite_load($iid, $reset = FALSE) {
  $invites = invite_load_multiple(array($iid), array(), $reset);
  return reset($invites);
}
/**
 * Load multiple invites based on certain conditions.
 */
function invite_load_multiple($iids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('invite', $iids, $conditions, $reset);
}

/**
 * Save invite.
 */
function invite_save($invite) {
  // Invoke hook_invite_validate
  $invite_valid = TRUE;
  foreach (module_implements('invite_validate') as $module) {
    $invite_valid = $invite_valid && module_invoke($module, 'invite_validate', $invite);
  }

  return $invite_valid ? entity_save('invite', $invite) : FALSE;
}

/**
 * Delete single invite.
 */
function invite_delete($invite) {
  entity_delete('invite', entity_id('invite' ,$invite));
}

/**
 * Delete multiple invites.
 */
function invite_delete_multiple($invite_ids) {
  entity_delete_multiple('invite', $invite_ids);
}

/**
 * Load Invite Type.
 */
function invite_type_load($invite_type) {
  return invite_get_types($invite_type);
}
/**
 * List of Invite Types.
 */
function invite_get_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('invite_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save Invite Type entity.
 */
function invite_type_save($invite_type) {
  entity_save('invite_type', $invite_type);

  if (variable_get($invite_type->type . '_' . $invite_type->invite_processor, FALSE)) {
    $function = $invite_type->invite_processor . '_invite_type_create';
    if (function_exists($function)) {
      $function($invite_type);
    }
    variable_set($invite_type->type . '_' . $invite_type->invite_processor, TRUE);
  }
}

/**
 * Delete single case type.
 */
function invite_type_delete($invite_type) {
  variable_del($invite_type->type . '_' . $invite_type->invite_processor);
  entity_delete('invite_type', entity_id('invite_type', $invite_type));
}

/**
 * Delete multiple case types.
 */
function invite_type_delete_multiple($invite_type_ids) {
  entity_delete_multiple('invite_type', $invite_type_ids);
}
